plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

jar {
   enabled = false
}

group = 'com.modu-taxi'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {

    // Web
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    testImplementation 'junit:junit:4.13.1'

    // DB
    runtimeOnly 'com.mysql:mysql-connector-j'

    // Dev
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // json
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.9.1'
    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1'

    // Jwt
    implementation "io.jsonwebtoken:jjwt:0.9.1"
    // com.sun.xml.bind
    implementation 'com.sun.xml.bind:jaxb-impl:4.0.1'
    implementation 'com.sun.xml.bind:jaxb-core:4.0.1'
    // javax.xml.bind
    implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // AWS - S3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'


    // WebClient
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    // mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'com.amazonaws:aws-java-sdk-ses:1.12.3'

    // MongoDB
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // Spatial Data
    implementation 'org.hibernate.orm:hibernate-spatial:6.4.4.Final'

    // WebSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    //Cool SMS
    implementation 'net.nurigo:sdk:4.2.7'

    //Http Client
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'

    // QueryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    implementation 'com.querydsl:querydsl-sql-spatial:5.0.0'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Firebase
    implementation 'com.google.firebase:firebase-admin:9.2.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

processResources.dependsOn('copySubmodule')
task copySubmodule(type: Copy) {
    from './config'
    include '*.yml', '*.json'
    into './src/main/resources'
}

def generated = "src/main/generated"

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(generated))
}

sourceSets {
    main.java.srcDirs += [generated]
}

clean {
    delete file(generated)
}